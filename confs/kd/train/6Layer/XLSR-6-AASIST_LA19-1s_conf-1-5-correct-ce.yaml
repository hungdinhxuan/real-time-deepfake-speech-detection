name: "XLSR-6-AASIST_LA19-1s_conf-1-5-ce"
model:
  teacher:
    name: "W2V2_AASIST"
    teacher_module_paths:
      - "out_layer"
      - "ssl_model.model.encoder.layers.0.final_layer_norm" # 1st layer
      - "ssl_model.model.encoder.layers.1.final_layer_norm" # 2nd layer
      - "ssl_model.model.encoder.layers.2.final_layer_norm" # 3rd layer
      - "ssl_model.model.encoder.layers.3.final_layer_norm" # 4th layer
      - "ssl_model.model.encoder.layers.4.final_layer_norm" # 5th layer
      - "ssl_model.model.encoder.layers.5.final_layer_norm" # 6th layer

    teacher_module_ios:
      - "False:True"
      - "False:True"
      - "False:True"
      - "False:True"
      - "False:True"
      - "False:True"
      - "False:True"

    pretrained_path: "/datad/hungdx/Towards-Real-Time-Deepfake-Speech-Detection-in-Resource-Limited-Scenarios/runs/aasist_runs/XLSR_AASIST_RawBoost4/best_LA_epoch32_0.004826_99.6229.pt"

    is_parallel: True

  student:
    name: "Distil_XLSR_N_Trans_Layer_AASIST"
    student_module_paths:
      - "out_layer"
      - "ssl_model.model.encoder.layers.0.final_layer_norm" # 1st layer
      - "ssl_model.model.encoder.layers.1.final_layer_norm" # 2nd layer
      - "ssl_model.model.encoder.layers.2.final_layer_norm" # 3rd layer
      - "ssl_model.model.encoder.layers.3.final_layer_norm" # 4th layer
      - "ssl_model.model.encoder.layers.4.final_layer_norm" # 5th layer
      - "ssl_model.model.encoder.layers.5.final_layer_norm" # 6th layer

    student_module_ios:
      - "False:True"
      - "False:True"
      - "False:True"
      - "False:True"
      - "False:True"
      - "False:True"
      - "False:True"

    kwargs:
      num_layers: 6 #
      order: "custom" # 'middle' for middle layers, 'first' for first layers, 'last' for last layers, "custom" for custom layers
      custom_order: [0, 1, 2, 3, 4, 5] # 2, 3, 4, 5th layer

is_learning_rate_scheduler: False

# learning_rate_scheduler:
#   name: "CosineAnnealingWarmRestarts"
#   params:
#     T_0: 2 # number of epochs for the first restart
#     T_mult: 2 # factor to increase T_0 after each restart
#     eta_min: 0.000001
#     verbose: False
learning_rate_scheduler:
  name: 'ReduceLROnPlateau'
  params:
    mode: 'min'
    patience: 10
    factor: 0.5 # Reduce learning rate by 0.5 when the metric has stopped improving for 10 epochs
    threshold_mode: 'rel'
    verbose: True

train:
  padding_size: 16000 # 1s for LA19_1s
  learning_rate: 0.000001 # 1e-6
  weight_decay: 0.00001 # Fixed weight decay at 1e-5
  batch_size: 32
  num_epochs: 200
  num_workers: 4
  amp: True
  teacher: True
  patience: 20 # Patience for early stopping
  alpha: 0.1 # weight for CE loss (1-beta), beta = 0.9
  seed: 42
  freeze_ssl_num_epoch: 0 # 0 for no freeze
  dataset: "LA19_1s"
  augment_mode: "rawboost" # 'rawboost' for rawboost, 'audiomentations' for audiomentations
  algo: 4 # rawboost4: 3 types of noise
  student_resume: "" # Stateless training
  cross_entropy_loss_weight: [0.1, 0.9]
  is_kl_loss: False
  copy_weights: True # Copy weights from teacher to student
  wandb_project_name: "iconip2024_kd"
  model_to_save: "/datad/pretrained/KD_ICONIP"

criterion_weights: [1, 0.00001, 0.00001, 0.00001, 0.00001, 0.00001, 0.00001, 1, 1, 1, 1, 1, 1] # 16 heads so 0.0625 for each head

criterions:
  - key: 'KDLoss'
    kwargs:
      student_module_path: 'out_layer'
      student_module_io: 'output'
      teacher_module_path: 'out_layer'
      teacher_module_io: 'output'
      beta: 0.9 
      temperature: 4

  - key: "MSELoss" # 1 -> 1
    kwargs:
      student_module_path: "ssl_model.model.encoder.layers.0.final_layer_norm"
      student_module_io: "output"
      teacher_module_path: "ssl_model.model.encoder.layers.0.final_layer_norm"
      teacher_module_io: "output"

  - key: "MSELoss" # 2 -> 2
    kwargs:
      student_module_path: "ssl_model.model.encoder.layers.1.final_layer_norm"
      student_module_io: "output"
      teacher_module_path: "ssl_model.model.encoder.layers.1.final_layer_norm"
      teacher_module_io: "output"

  - key: "MSELoss" # 3 -> 3
    kwargs:
      student_module_path: "ssl_model.model.encoder.layers.2.final_layer_norm"
      student_module_io: "output"
      teacher_module_path: "ssl_model.model.encoder.layers.2.final_layer_norm"
      teacher_module_io: "output"

  - key: "MSELoss" # 4 -> 4
    kwargs:
      student_module_path: "ssl_model.model.encoder.layers.3.final_layer_norm"
      student_module_io: "output"
      teacher_module_path: "ssl_model.model.encoder.layers.3.final_layer_norm"
      teacher_module_io: "output"

  - key: "MSELoss" # 5 -> 5
    kwargs:
      student_module_path: "ssl_model.model.encoder.layers.4.final_layer_norm"
      student_module_io: "output"
      teacher_module_path: "ssl_model.model.encoder.layers.4.final_layer_norm"
      teacher_module_io: "output"

  - key: "MSELoss" # 6 -> 6
    kwargs:
      student_module_path: "ssl_model.model.encoder.layers.5.final_layer_norm"
      student_module_io: "output"
      teacher_module_path: "ssl_model.model.encoder.layers.5.final_layer_norm"
      teacher_module_io: "output"

  ###  CosineLoss
  - key: "CosineLoss" # 1 -> 1
    kwargs:
      student_module_path: "ssl_model.model.encoder.layers.0.final_layer_norm"
      student_module_io: "output"
      teacher_module_path: "ssl_model.model.encoder.layers.0.final_layer_norm"
      teacher_module_io: "output"

  - key: "CosineLoss" # 2 -> 2
    kwargs:
      student_module_path: "ssl_model.model.encoder.layers.1.final_layer_norm"
      student_module_io: "output"
      teacher_module_path: "ssl_model.model.encoder.layers.1.final_layer_norm"
      teacher_module_io: "output"

  - key: "CosineLoss" # 3 -> 3
    kwargs:
      student_module_path: "ssl_model.model.encoder.layers.2.final_layer_norm"
      student_module_io: "output"
      teacher_module_path: "ssl_model.model.encoder.layers.2.final_layer_norm"
      teacher_module_io: "output"

  - key: "CosineLoss" # 4 -> 4
    kwargs:
      student_module_path: "ssl_model.model.encoder.layers.3.final_layer_norm"
      student_module_io: "output"
      teacher_module_path: "ssl_model.model.encoder.layers.3.final_layer_norm"
      teacher_module_io: "output"

  - key: "CosineLoss" # 5 -> 5
    kwargs:
      student_module_path: "ssl_model.model.encoder.layers.4.final_layer_norm"
      student_module_io: "output"
      teacher_module_path: "ssl_model.model.encoder.layers.4.final_layer_norm"
      teacher_module_io: "output"

  - key: "CosineLoss" # 6 -> 6
    kwargs:
      student_module_path: "ssl_model.model.encoder.layers.5.final_layer_norm"
      student_module_io: "output"
      teacher_module_path: "ssl_model.model.encoder.layers.5.final_layer_norm"
      teacher_module_io: "output"
